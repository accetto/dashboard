#!/bin/bash

# Created by argbash-init v2.10.0

# ARG_VERSION([echo $0 v25.05.03])

# ARG_HELP([Generates a new file 'scrap_[github|dockerhub]_dashboard'. Overwrites the existing file.])
# ARG_POSITIONAL_SINGLE([dashboard],[Required. Dashboard type. One of 'github|dockerhub'.])
# ARG_OPTIONAL_BOOLEAN([verbose],[],[If also verbose output in terminal.],[off])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='vh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose="off"


print_help()
{
	printf '%s\n' "Generates a new file 'scrap_[github|dockerhub]_dashboard'. Overwrites the existing file."
	printf 'Usage: %s [-v|--version] [-h|--help] [--(no-)verbose] <dashboard>\n' "$0"
	printf '\t%s\n' "<dashboard>: Required. Dashboard type. One of 'github|dockerhub'."
	printf '\t%s\n' "-v, --version: Prints version"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "--verbose, --no-verbose: If also verbose output in terminal. (off by default)"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-v|--version)
				echo $0 v25.05.03
				exit 0
				;;
			-v*)
				echo $0 v25.05.03
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			--no-verbose|--verbose)
				_arg_verbose="on"
				test "${1:0:5}" = "--no-" && _arg_verbose="off"
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'dashboard'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_dashboard "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# vvv  PLACE YOUR CODE HERE  vvv

spit() {

    if [[ "${_arg_verbose}" == "on" ]]; then

        echo -e -n "$@" | tee -a "${_target_file}"
    else
        echo -e -n "$@" >>"${_target_file}"
    fi
}

spit_github_repo() {
    local repo="${1}"
    local suffix="${2}"

    _counter+=1

    spit "\n"
    spit "\(${_counter}\) "
    spit "[${repo}](https://github.com/${_owner}/${repo})${suffix}\n"

    spit "\n"

    spit "![badge-github-${repo}-open-issues][badge-github-${repo}-open-issues]\n"
    spit "![badge-github-${repo}-release][badge-github-${repo}-release]\n"
    spit "![badge-github-${repo}-release-date][badge-github-${repo}-release-date]\n"
    spit "![badge-github-${repo}-last-commit][badge-github-${repo}-last-commit]\n"
    spit "![badge-github-${repo}-stars][badge-github-${repo}-stars]\n"
    spit "![badge-github-${repo}-forks][badge-github-${repo}-forks]\n"

}

spit_github_repo_badges() {
    local repo="${1}"

    spit "\n"

    spit "[badge-github-${repo}-open-issues]: https://img.shields.io/github/issues/${_owner}/${repo}\n"
    spit "[badge-github-${repo}-release]: https://img.shields.io/github/v/release/${_owner}/${repo}\n"
    spit "[badge-github-${repo}-release-date]: https://img.shields.io/github/release-date/${_owner}/${repo}\n"
    spit "[badge-github-${repo}-last-commit]: https://img.shields.io/github/last-commit/${_owner}/${repo}\n"
    spit "[badge-github-${repo}-stars]: https://img.shields.io/github/stars/${_owner}/${repo}?style=flat\n"
    spit "[badge-github-${repo}-forks]: https://img.shields.io/github/forks/${_owner}/${repo}?style=flat\n"
}

get_version_stamp()
{
    echo "Version: $(date +%Y-%m-%d)"
}

generate_github_dashboard() {
    local -a active_repos_g3=(
        "ubuntu-vnc-xfce-g3"
        "debian-vnc-xfce-g3"
        "headless-coding-g3"
        "headless-drawing-g3"
        "user-guide-g3"
    )

    local -a active_repos_g2=(
        "xubuntu-vnc-novnc"
    )

    local -a active_repos_g1=(
        "ubuntu-vnc-xfce"
    )

    local -a active_repos=(
        "argbash-docker"
        "dashboard"
    )

    local -a archived_repos_g1=(
        "ubuntu-vnc-xfce-firefox"
        "ubuntu-vnc-xfce-firefox-plus"
        "ubuntu-vnc-xfce-chromium"
    )

    local -a archived_repos=(
        "xubuntu-vnc"
        "hello-there"
        "dev-base"
    )

    echo "Wait... Making a new dashboard markdown file '${_target_file}'... The exiting file will be overwritten."
    echo

    rm -rf "${_target_file}"

    _counter=0

    spit "# GitHub Dashboard\n"
    spit "\n"

    spit "[Docker Hub Dashboard](https://github.com/${_owner}/dashboard/blob/master/dockerhub-dashboard.md)\n"
    spit "\n"
    spit "****\n"
    spit "\n"
    spit "${_version_stamp}\n"
    spit "\n"
    spit "## Active repositories\n"

    # spit "\n"

    for repo in "${active_repos_g3[@]}"; do
        spit_github_repo "${repo}"
    done

    for repo in "${active_repos_g2[@]}"; do
        spit_github_repo "${repo}" "-g2"
    done

    for repo in "${active_repos_g1[@]}"; do
        spit_github_repo "${repo}" "-g1"
    done

    for repo in "${active_repos[@]}"; do
        spit_github_repo "${repo}"
    done

    spit "\n"
    spit "## Archived repositories\n"

    for repo in "${archived_repos_g1[@]}"; do
        case "${repo}" in

            ubuntu-vnc-xfce-firefox)
                spit_github_repo "${repo}" " (activated and merged into ubuntu-vnc-xfce-g1"
                ;;

            ubuntu-vnc-xfce-firefox-plus)
                spit_github_repo "${repo}" " (activated and merged into ubuntu-vnc-xfce-g1)"
                ;;

            ubuntu-vnc-xfce-chromium)
                spit_github_repo "${repo}" " (activated and merged into ubuntu-vnc-xfce-g1"
                ;;

            *)
                spit_github_repo "${repo}" "-g1"
                ;;
        esac
    done

    for repo in "${archived_repos[@]}"; do
        spit_github_repo "${repo}"
    done

    spit "\n"
    spit "****\n"

    ### Add the badge links at the file end

    ### Active repository badges

    for repo in "${active_repos_g3[@]}"; do
        spit_github_repo_badges "${repo}"
    done

    for repo in "${active_repos_g2[@]}"; do
        spit_github_repo_badges "${repo}" "-g2"
    done

    for repo in "${active_repos_g1[@]}"; do
        spit_github_repo_badges "${repo}" "-g1"
    done

    for repo in "${active_repos[@]}"; do
        spit_github_repo_badges "${repo}"
    done

    ### Archived repository badges

    for repo in "${archived_repos_g1[@]}"; do
        spit_github_repo_badges "${repo}" "-g1"
    done

    for repo in "${archived_repos[@]}"; do
        spit_github_repo_badges "${repo}"
    done

}

spit_dockerhub_repo() {
    local repo="${1}"

    _counter+=1

    spit "| ${_counter} | "
    spit "[${repo}](https://hub.docker.com/r/accetto/${repo}) | "
    spit "![badge-docker-${repo}-pulls][badge-docker-${repo}-pulls] | "
    spit "![badge-docker-${repo}-stars][badge-docker-${repo}-stars] |\n"

}

spit_dockerhub_repo_badges() {
    local repo="${1}"

    spit "\n"

    spit "[badge-docker-${repo}-pulls]: https://img.shields.io/docker/pulls/${_owner}/${repo}\n"
    spit "[badge-docker-${repo}-stars]: https://img.shields.io/docker/stars/${_owner}/${repo}\n"

}

generate_dockerhub_dashboard() {
    local -a active_repos_g3=(
        "ubuntu-vnc-xfce-g3"
        "ubuntu-vnc-xfce-chromium-g3"
        "ubuntu-vnc-xfce-firefox-g3"
        "ubuntu-vnc-xfce-blender-g3"
        "ubuntu-vnc-xfce-drawio-g3"
        "ubuntu-vnc-xfce-freecad-g3"
        "ubuntu-vnc-xfce-gimp-g3"
        "ubuntu-vnc-xfce-inkscape-g3"
        "ubuntu-vnc-xfce-opengl-g3"
        "debian-vnc-xfce-g3"
        "debian-vnc-xfce-chromium-g3"
        "debian-vnc-xfce-firefox-g3"
        "debian-vnc-xfce-nodejs-g3"
        "debian-vnc-xfce-nvm-g3"
        "debian-vnc-xfce-postman-g3"
        "debian-vnc-xfce-python-g3"
        "debian-vnc-xfce-vscode-g3"
    )

    local -a active_repos_g2=(
        "xubuntu-vnc-novnc"
        "xubuntu-vnc-novnc-chrome"
        "xubuntu-vnc-novnc-chromium"
        "xubuntu-vnc-novnc-firefox"
    )

    local -a active_repos_g1=(
        "ubuntu-vnc-xfce"
        "ubuntu-vnc-xfce-chromium"
        "ubuntu-vnc-xfce-firefox-default"
        "ubuntu-vnc-xfce-firefox-plus"
    )

    local -a active_repos=(
        "argbash-docker"
    )

    echo "Wait... Making a new dashboard markdown file '${_target_file}'... The exiting file will be overwritten."
    echo

    rm -rf "${_target_file}"

    _counter=0

    spit "# Docker Hub Dashboard\n"
    spit "\n"

    spit "[GitHub Dashboard](https://github.com/accetto/dashboard/blob/master/github-dashboard.md)\n"
    spit "\n"
    spit "****\n"
    spit "\n"
    spit "${_version_stamp}\n"
    spit "\n"
    spit "## Active repositories\n"
    spit "\n"
    spit "|No.| Repository | Pulls | Stars |\n"
    spit "|---|----------- | ----- | ----- |\n"
    spit "|   | Generation 3 | | |\n"

    for repo in "${active_repos_g3[@]}"; do
        if [[ "${repo}" != "user-guide-g3" ]]; then
            spit_dockerhub_repo "${repo}"
        fi
    done

    spit "|   | Generation 2 | | |\n"

    for repo in "${active_repos_g2[@]}"; do
        spit_dockerhub_repo "${repo}"
    done

    spit "|   | Generation 1 | | |\n"

    for repo in "${active_repos_g1[@]}"; do
        spit_dockerhub_repo "${repo}"
    done

    spit "|   | Generation | | |\n"

    for repo in "${active_repos[@]}"; do
        spit_dockerhub_repo "${repo}"
    done

    spit "\n"
    spit "****\n"

    ### Add the badge links ate the of the file

    for repo in "${active_repos_g3[@]}"; do
        if [[ "${repo}" != "user-guide-g3" ]]; then
            spit_dockerhub_repo_badges "${repo}"
        fi
    done

    for repo in "${active_repos_g2[@]}"; do
        spit_dockerhub_repo_badges "${repo}"
    done

    for repo in "${active_repos_g1[@]}"; do
        spit_dockerhub_repo_badges "${repo}"
    done
    for repo in "${active_repos[@]}"; do
        spit_dockerhub_repo_badges "${repo}"
    done

}

main() {
    case "${_arg_dashboard}" in

    github)
        _target_file="scrap_github-dashboard.md"
        generate_github_dashboard
        ;;

    dockerhub)
        _target_file="scrap_dockerhub-dashboard.md"
        generate_dockerhub_dashboard
        ;;

    *)
        die "Unsupported dashboard type: '"${_arg_dashboard}"'"
        ;;

    esac
}

declare _target_file="scrap_github-dashboard.md"

declare _owner="accetto"

declare -i _counter=0

declare _version_stamp=$(get_version_stamp)

main $@

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
